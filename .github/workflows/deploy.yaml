name: deploy

on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build

      - if: github.ref_name == 'main'
        name: Deploy production
        id: deploy-prod
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      - if: github.ref_name != 'main'
        name: Deploy preview
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: versions upload --message "${{ github.ref_name }} (${{ github.sha }})"

      - name: Report deployment status
        if: always()
        uses: actions/github-script@v7
        env:
          IS_PROD: ${{ github.ref_name == 'main' }}
          IS_SUCCESS: ${{ job.status == 'success' }}
          ENVIRONMENT_URL: ${{ steps.deploy-prod.outputs.deployment-url || steps.deploy-preview.outputs.deployment-url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const isProd = process.env.IS_PROD === "true";
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              required_contexts: [],
              environment: isProd ? "production" : "preview",
              production_environment: isProd
            });
            console.log(`Created deployment ID: ${deployment.id}`);

            const success = process.env.IS_SUCCESS === "true";
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: success ? 'success' : 'failure',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: process.env.ENVIRONMENT_URL,
            });
            console.log(`Reported deployment as ${success ? 'success' : 'failure'}`);
